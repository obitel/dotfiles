#!/bin/sh
# ~/.bash_env: My generally generic (i.e. not host-specific) environment changes.
#echo dotfiles/bash/env: start

function is_on_path() {
    # Return 0 if the command is found on the PATH, non-zero otherwise.
    # GNU which behaves this way, some (notably on Mac OS X) don't.
    if [ `uname -s` = "Linux" ]; then
        result="`\which $1 2>/dev/null`"
    else
        result="`\which $1`"
    fi
    if test -e "$result"; then
        #echo is_on_path\($1\) returning 0
        return 0
    else
        #echo is_on_path\($1\) returning 1
        return 1
    fi
}

function tm_prepend_path() {
    # Prepend the given dir to $PATH.
    # We don't check if the given directory is already on the PATH
    # because we may specifically want to put it *in front*.
    #XXX Extend this to *remove* any pre-existing such entry before
    #    prepending.
    #if test "`echo ":$PATH:" | grep ":$1:"`"; then
    #    echo tm_prepend_path: warn: $1 already in PATH
    #fi
    export PATH="$1:$PATH"
    #echo tm_prepend_path\($1\): PATH=$PATH
}

function tm_append_path() {
    if test -d "$1" && test ! "`echo ":$PATH:" | grep ":$1:"`"; then
        export PATH="$PATH:$1"
    fi
    #echo tm_append_path\($1\): PATH=$PATH
}

function tm_prepend_manpath() {
    #echo tm_prepend_manpath\($1\)
    if test -d "$1"; then
        export MANPATH=$1:$MANPATH
    fi
}

function tm_is_interactive_shell() {
    if [ `uname -s` = "Darwin" ]; then
        if [ -c "`tty`" ]; then
            return 0  # interactive
        else
            return 1  # non-interactive
        fi
    else
        if [ -z "$PS1" ]; then
            return 1  # non-interactive
        else
            return 0  # interactive
        fi
    fi
}


# Setup PATH and MANPATH
# PATH: /opt/*/bin
#   You may want to `tm_append_path /opt/FOO/bin` in ~/.bash_localenv
#   for certain values of FOO.
tm_prepend_path /usr/local/sbin
tm_prepend_path /usr/local/bin
# PATH: ~/opt/*/bin
if test -d $HOME/opt; then
    for p in `\ls -1 $HOME/opt`;
    do
        tm_prepend_path $HOME/opt/$p/bin
        tm_prepend_manpath $HOME/opt/$p/man
    done
    unset p
fi
tm_prepend_path $HOME/.local/bin
tm_prepend_path $HOME/bin
# PATH: black "bk" Komodo build tool  
if [ -f $HOME/as/openkomodo/util/black/bk ]; then
    tm_prepend_path $HOME/as/openkomodo/util/black
elif [ -f $HOME/as/komodo/util/black/bk ]; then
    tm_prepend_path $HOME/as/komodo/util/black
fi
tm_append_path $HOME/as/mk/bin
if test `uname -s` == "Darwin"; then
    tm_prepend_path /Library/Frameworks/Python.framework/Versions/Current/bin
fi

# Python
[ -f ~/.pythonstartuprc ] && export PYTHONSTARTUP=~/.pythonstartuprc


# VCS, etc.
if is_on_path vim; then
    export EDITOR=vim
else
    export EDITOR=vi
fi
export SVN_RSH=ssh
export SVN_EDITOR=vim
export CVS_RSH=ssh


# Keychain
#XXX Could improve this to only run once on first login (launchd on Tiger?) and
#    then only do `keychain --quick --quiet` for subsequent shells.
if tm_is_interactive_shell; then
if test -f $HOME/.ssh/trusted; then
    if is_on_path keychain; then
        ls -1 $HOME/.ssh/id_* | grep -v '\.pub' | grep -v '\.ppk' \
            | xargs keychain --quick --quiet --lockwait 120
        unset FIND_ARGS
        [[ -f $HOME/.keychain/$HOSTNAME-sh ]] && source $HOME/.keychain/$HOSTNAME-sh
        [[ -f $HOME/.keychain/$HOSTNAME-sh-gpg ]] && source  $HOME/.keychain/$HOSTNAME-sh-gpg
    fi
fi
fi


# Mac OS X
if [ `uname -s` == "Darwin" ]; then
    #test -r /sw/bin/init.sh && . /sw/bin/init.sh # enable Fink
    #tm_append_path /opt/local/bin # enable DarwinPorts
    #tm_append_path /opt/local/sbin # enable DarwinPorts
    tm_prepend_path /usr/local/ActivePerl-5.10/bin
fi


#---- Terminal setup
# See: http://seismo.ethz.ch/linux/backspace.html

if [ -c "`tty`" ]; then
    if [ `uname` = "HP-UX" ]; then
        #---- setup the terminal

        if [ "$TERM" = "" ]; then
           eval ` tset -s -Q -m ':?hp' `
        else
           eval ` tset -s -Q `
        fi
        stty erase "^H" kill "^U" intr "^C" eof "^D"
        stty hupcl ixon ixoff
        tabs

        if test $TERM = xterm; then   # this is for the new Konsole
            #XXX This TERM causes problems on hpux-ia64 (bigsur01).
            #export TERM=vt220
            #  ^? *not* made with:   cntl-v backspace ; just enter: ^?
            stty erase ^?  
        fi

    elif [ `uname` = "AIX" ]; then
        #if [ "$TERM" = "" ]
        #then
        #   eval ` tset -s -Q -m ':?hp' `
        #else
        #   eval ` tset -s -Q `
        #fi
        stty erase "^H" kill "^U" intr "^C" eof "^D"
        stty hupcl ixon ixoff
        if test $TERM = xterm ; then   # this is for the new Konsole
            export TERM=vt220
            stty erase ^?  #  ^? *not* made with:   cntl-v backspace ; just enter: ^?
        fi
    fi
fi


