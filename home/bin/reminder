#!/usr/bin/env python

"""
Popup (growl) reminder for a certain time.

Usage:
    reminder TIME [MESSAGE]

Examples:
    reminder 5m             # reminder in 5 minutes
    reminder 5m blah blah   # ... in 5 minutes with message "blah blah"
    reminder 1h             # ... in 1 hour
    reminder 10s            # ... in 10 seconds

    reminder 1:30           # ... at 1:30 (the *next* 1:30, am/pm depends)
    reminder 10:00p         # ... at 10:00 pm
    reminder 10:00a         # ... at 10:00 am
    reminder 10p            # ... at 10:00 pm (shortcut)

    reminder now            # ... right now

TODO:
    reminder noon
    reminder midnight
    reminder 1:30h          # ... in 1 hour and 30 minutes
    reminder 1:30m          # ... in 1 minute and 30 seconds
    reminder 1:23:45h       # ... in 1 hour, 23 minutes and 45 seconds
    reminders               # list all pending reminders
    reminders -c ID         # candel a reminder
"""

import sys
import os
import datetime
import codecs
import re
import tempfile


#---- globals

TRACE = os.environ.has_key("TRACE")



#---- exceptions

class ReminderError(Exception):
    pass


#---- support stuff

def usage():
    print __doc__

#var endPattern = /^([1-9]\d*)([mhd])$/;
def timeFromArg(arg, now):
    timePatterns = [
        ("now", re.compile("now")),
        ("relative", re.compile("(?P<first>[1-9][0-9]*)(?P<scope>[smhd])")),
        ("absolute", re.compile("(?P<hours>[1-9][0-9]?)(:(?P<minutes>[0-9]{2}))?(?P<meridian>[pa])?")),
    ]
    for timeType, pat in timePatterns:
        m = pat.search(arg)
        if m:
            break
    else:
        raise ReminderError("invalid time argument: '%s'" % arg)
    if timeType == "now":
        time = now
    elif timeType == "relative":
        time = now
        first = int(m.group("first"))
        scope = m.group("scope")
        if scope == 's':
            time += datetime.timedelta(seconds=first)
        elif scope == 'm':
            time += datetime.timedelta(minutes=first)
        elif scope == 'h':
            time += datetime.timedelta(hours=first)
        elif scope == 'd':
            time += datetime.timedelta(days=first)
    elif timeType == "absolute":
        hours = int(m.group("hours"))
        minutes = m.group("minutes") and int(m.group("minutes")) or 0
        if minutes >= 60:
            raise ReminderError(
                "invalid minutes (>=60) in time argument: '%s'" % arg)
        meridian = m.group("meridian")
        if not meridian:
            time = datetime.datetime(now.year, now.month, now.day, hours,
                minutes)
            while time < now:
                time += datetime.timedelta(hours=12)
        elif meridian == 'a':
            time = datetime.datetime(now.year, now.month, now.day)
            time += datetime.timedelta(hours=hours, minutes=minutes)
            if now > time:
                time += datetime.timedelta(days=1)
        elif meridian == 'p':
            hours += 12
            time = datetime.datetime(now.year, now.month, now.day)
            time += datetime.timedelta(hours=hours, minutes=minutes)
            if now > time:
                time += datetime.timedelta(days=1)
    else:
        raise ReminderError("WTF?")
    return time


#---- mainline

def main(argv):
    if len(argv) < 2:
        usage()
        return 2
    message = None
    if len(argv) > 2:
        message = ' '.join(argv[2:])
    now = datetime.datetime.now()
    time = timeFromArg(argv[1], now=now)
    assert time >= now
    delta = time - now
    delta_seconds = delta.days * 24 * 60 * 60 + delta.seconds

    script = []
    script.append("sleep %d" % delta_seconds)
    if message:
        message_arg = " -m '%s'" % message
    else:
        message_arg = ""
    time_str = time.strftime("%I:%M %p").lstrip('0')
    date_str = time.strftime("%a, %b %d at ") + time_str
    script.append("growlnotify -s -t 'Reminder at %s' -a iCal %s"
        % (time_str, message_arg))

    fd, path = tempfile.mkstemp(prefix='reminder-tmp')
    f = os.fdopen(fd, 'w')
    f.write('\n'.join(script))
    f.close()
    os.system('cd /var/tmp && nohup bash "%s" 2>/dev/null &' % path)

    print "Reminder set for %s." % date_str
    if TRACE:
        print "-- (time: %s, delta: %s)" % (time, delta)
        print '\n'.join(script)

if __name__ == '__main__':
    sys.exit(main(sys.argv))
